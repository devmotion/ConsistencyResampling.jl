var documenterSearchIndex = {"docs":
[{"location":"supported/#Supported-predictions","page":"Supported predictions","title":"Supported predictions","text":"","category":"section"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"This page explains three supported types of predictions.","category":"page"},{"location":"supported/#Probabilities","page":"Supported predictions","title":"Probabilities","text":"","category":"section"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"If the predictions are provided as a vector of probabilities, they correspond to a set of Bernoulli distributions with these parameters. Accordingly, the synthetic targets will be boolean values (true if the predicted outcome occurs, false if not).","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"We define a vector of 100 randomly sampled probabilities.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"using ConsistencyResampling\nusing Random #hide\nRandom.seed!(1234) #hide\n\nprobabilities = rand(100)\nnothing #hide","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Consistency resampling yields a tuple consisting of a randomly sampled probability and a sample from the corresponding Bernoulli distribution.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"probability, target = rand(Consistent(probabilities))","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"probability in probabilities","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Multiple samples are returned as a vector of tuples.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"rand(Consistent(probabilities), 10)","category":"page"},{"location":"supported/#Vectors-of-probabilities","page":"Supported predictions","title":"Vectors of probabilities","text":"","category":"section"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"If the predictions are vectors of real-valued vectors, they correspond to the class probabilities of categorical distributions. In this case, the targets will be 1,…,m where the number of classes m is given by the length of the real-valued vectors.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"We generate 100 randomly sampled vectors of probabilities for m = 5 classes.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"using ConsistencyResampling\nusing Random #hide\nRandom.seed!(1234) #hide\n\npredictions = map(1:100) do _\n    x = rand(5)\n    x ./= sum(x)\n    return x\nend\nnothing #hide","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Consistency resampling returns a tuple of a randomly sampled prediction and a sample from the corresponding categorical distribution.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"prediction, target = rand(Consistent(predictions))","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"prediction in predictions","category":"page"},{"location":"supported/#Vectors-of-distributions","page":"Supported predictions","title":"Vectors of distributions","text":"","category":"section"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Additionally, predictions can be provided as a vector of distributions. These distributions have to support the Random API. More precisely,","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Random.Sampler(::Type{<:Random.AbstractRNG}, ::MyDistributionType, ::Random.Repetition)","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"must be defined and it must be possible to sample from the resulting samplers with rand. More information about the interface can be found in the documentation of Random.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"We define vector of 100 normal distributions with randomly sampled mean and standard deviation.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"using ConsistencyResampling\nusing Distributions\nusing Random #hide\nRandom.seed!(1234) #hide\n\npredictions = map(Normal, randn(100), rand(100))\nnothing #hide","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Unfortunately, currently Distributions does not define Random.Sampler and therefore we have to implement it to be able to perform consistency resampling:","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"using Random\n\nRandom.Sampler(::Type{<:AbstractRNG}, s::Sampleable, ::Val{1}) = s\nRandom.Sampler(::Type{<:AbstractRNG}, s::Sampleable, ::Val{Inf}) = sampler(s)","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"Consistency resampling yields a randomly sampled prediction and a sample from it.","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"prediction, target = rand(Consistent(predictions))","category":"page"},{"location":"supported/","page":"Supported predictions","title":"Supported predictions","text":"prediction in predictions","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConsistencyResampling","category":"page"},{"location":"#ConsistencyResampling","page":"Home","title":"ConsistencyResampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consistency resampling of calibrated predictions","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package contains an implementation of consistency resampling.[BS07]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Consistency resampling is a resampling technique that generates a calibrated set of predictions and corresponding targets from a set of predictions. The procedure consists of two steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"predictions are resampled with replacement\nsynthetic targets are sampled according to the resampled predictions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This resampling procedure ensures that the predictions are calibrated for the artificial targets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[BS07]: Bröcker, J. and Smith, L.A., 2007. Increasing the reliability of reliability diagrams. Weather and forecasting, 22(3), pp. 651-661.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The API consists only of Consistent.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Consistent","category":"page"},{"location":"#ConsistencyResampling.Consistent","page":"Home","title":"ConsistencyResampling.Consistent","text":"Consistent(predictions::AbstractVector)\n\nCreate an object that can be used for resampling predictions and corresponding targets.\n\nThe set of predictions has to be provided as a vector consisting of\n\nprobabilities,\nvectors of probabilities summing up to 1,\nor distributions that can be sampled from.\n\nConsistency resampling can be performed with rand and rand!, as described in the documentation of Random.\n\nExamples\n\njulia> predictions = rand(100);\n\njulia> consistent = Consistent(predictions);\n\njulia> rand(consistent) isa Tuple{Float64,Bool}\ntrue\n\njulia> first(rand(consistent)) in predictions\ntrue\n\nnote: Note\nOne can use Random.Sampler to create a sampler that is optimized for the generation of multiple samples, e.g., by building an alias table:julia> using Random: Sampler, GLOBAL_RNG\n\njulia> sampler = Sampler(GLOBAL_RNG, Consistent(rand(100)));\n\njulia> rand(sampler) isa Tuple{Float64,Bool}\ntrueHowever, for small number of samples the setup cost can outweigh the improved sampling efficiency.\n\nnote: Note\nMultiple samples are returned as an array of tuples of predictions and corresponding targets. If you prefer a tuple of arrays of predictions and targets instead, you can use a package such as StructArrays and perform in-place sampling:julia> using StructArrays, Random\n\njulia> predictions = Vector{Float64}(undef, 100);\n\njulia> targets = Vector{Bool}(undef, 100);\n\njulia> rand!(StructVector((predictions, targets)), Consistent(rand(100)));\n\nReferences\n\nBröcker, J. and Smith, L.A., 2007. Increasing the reliability of reliability diagrams. Weather and forecasting, 22(3), pp. 651-661.\n\n\n\n\n\n","category":"type"}]
}
